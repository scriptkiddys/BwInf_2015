#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding auto
\fontencoding global
\font_roman utopia
\font_sans lmss
\font_typewriter default
\font_math auto
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\branch abc
\selected 0
\filename_suffix 0
\color #faf0e6
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\headheight 0cm
\headsep 0cm
\footskip 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language german
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Bundeswettbewerb Informatik 2015
\end_layout

\begin_layout Title
Dokumentation
\end_layout

\begin_layout Author
Lösungen von Christian Zdralek und Karl Welzel
\end_layout

\begin_layout Date
25.09.2015
\end_layout

\begin_layout Section*
Junioraufgabe 1
\end_layout

\begin_layout Standard
Da die Aufgabe darin besteht, alle Rechtecke zu genehmigen, die sich mit
 keinem bereits genehmigten überscheiden, besteht hier die Hauptaufgabe
 darin zu überprüfen, ob sich zwei gegebene Rechtecke überschneiden.
\end_layout

\begin_layout Subsection*
Lösungsidee:
\end_layout

\begin_layout Standard
Anstatt zu betrachten, wann sich zwei Rechtecke überschneiden, soll betrachtet
 werden, wann sie dies nicht tun.
 Es gibt vier Fälle die unterschieden werden:
\end_layout

\begin_layout Enumerate
Das erste Rechteck liegt über dem zweiten.
 
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\rightarrow$
\end_inset

 Die y-Koordinate der unteren Kante vom ersten Rechteck ist größer als die
 y-Koordinate der oberen Kante vom zweitem.
\end_layout

\begin_layout Enumerate
Das erste Rechteck liegt unter dem zweiten.
 
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\rightarrow$
\end_inset

 Die y-Koordinate der oberen Kante vom ersten Rechteck ist kleiner als die
 y-Koordinate der unteren Kante vom zweitem.
\end_layout

\begin_layout Enumerate
Das erste Rechteck liegt links neben dem zweiten.
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\rightarrow$
\end_inset

 Die x-Koordinate der rechten Kante vom ersten Rechteck ist kleiner als
 die y-Koordinate der linken Kante vom zweitem.
\end_layout

\begin_layout Enumerate
Das erste Rechteck liegt rechts neben dem zweiten.
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\rightarrow$
\end_inset

 Die x-Koordinate der linken Kante vom ersten Rechteck ist größer als die
 y-Koordinate der rechten Kante vom zweitem.
\end_layout

\begin_layout Standard
Wenn einer dieser Fälle eintritt, dann überschneiden sich die Rechtecke
 nicht.
 Es ist klar, dass wenn das erste Rechteck nicht neben dem zweiten liegt,
 es zwangsläufig Überschneidungen gibt.
 Also überschneiden sich zwei Rechtecke genau dann, wenn keiner der vier
 Fälle eintritt.
\end_layout

\begin_layout Subsection*
Quelltext (jA1.py):
\end_layout

\begin_layout LyX-Code
def overlapping(claim1, claim2):
\end_layout

\begin_layout LyX-Code
    return not (
\end_layout

\begin_layout LyX-Code
        claim[1] >= claim2[3] or #claim1 liegt über claim2
\end_layout

\begin_layout LyX-Code
        claim[3] <= claim2[1] or #claim1 liegt unter claim2
\end_layout

\begin_layout LyX-Code
        claim[2] <= claim2[0] or #claim1 liegt links neben claim2
\end_layout

\begin_layout LyX-Code
        claim[0] >= claim2[2]) #claim1 liegt rechts neben claim2 
\end_layout

\begin_layout Section*
Junioraufgabe 2
\end_layout

\begin_layout Subsection*
Lösungsidee:
\end_layout

\begin_layout Standard
Da das Ziel ist zu überprüfen, ob Kassiopeia alle weißen Felder erreichen
 kann, soll versucht werden ausgehend von eine Liste mit Feldern, die Kassiopeia
 erreichen kann zu erstellen, die am Anfang nur mit Kassiopeias Feld gefüllt
 ist und dann jeweils um alle angrenzenden Felder der Felder in dieser Liste
 erweitert wird, bis es keine weiteren gibt.
 Diese sind dann alle Felder die Kassiopeia erreichen kann und nun kann
 überprüft werden, ob dies alle weißen Felder sind.
 
\end_layout

\begin_layout Standard
Um diesen Vorgang etwas schneller zu machen werden die Felder in drei Stufen
 eingeteilt:
\end_layout

\begin_layout Enumerate
Neue Felder: alle Felder die in einem Schritt als weiße Nachbarfelder von
 überprüften Feldern gefunden worden
\end_layout

\begin_layout Enumerate
Überprüfte Felder: Felder, die von Kassiopeia aus erreichbar sind, deren
 Nachbarfelder aber noch nicht überprüft wurden
\end_layout

\begin_layout Enumerate
Vollstandig überprüfte Felder: Felder, die von Kassiopeia aus erreichbar
 sind und deren Nachbarfelder bereits überprüft wurden.
\end_layout

\begin_layout Standard
Das Feld von Kassiopeia wird am Anfang zu den überprüften Feldern gezählt
 und dann werden in jedem Schritt folgende Anweisungen ausgeführt:
\end_layout

\begin_layout Enumerate
Alle weißen Nachbarfelder von überprüften Feldern werden zu neuen Feldern.
\end_layout

\begin_layout Enumerate
Die überprüften Felder werden zu vollständig überprüften Feldern.
\end_layout

\begin_layout Enumerate
Alle neuen Felder, die nicht bereits vollständig überprüft wurden, werden
 zu überprüften Feldern.
\end_layout

\begin_layout Standard
Dies wird so lange durchgeführt bis es keine neuen Felder mehr gibt und
 damit alle weißen Felder, die Kassiopeia erreichen kann, zu den vollständig
 überprüften Feldern gehören.
\end_layout

\begin_layout Standard
Um diesen Vorgang besser zu visualisieren, sind hier einzelne Schritte für
 das Beispiel aus der Aufgabe dargestellt.
 Hier steht 
\begin_inset Quotes gld
\end_inset

Z
\begin_inset Quotes grd
\end_inset

 für vollständig überprüfte und 
\begin_inset Quotes gld
\end_inset

A
\begin_inset Quotes grd
\end_inset

 für überprüfte Felder.
 (Neue Felder sind nicht dargestellt, da sie nur als Zwischenstufe innerhalb
 eines Schrittes dienen und hier die Felder jeweils nach einem Schritt dargestel
lt werden.)
\end_layout

\begin_layout LyX-Code
#########
\end_layout

\begin_layout LyX-Code
#  #    #
\end_layout

\begin_layout LyX-Code
#  # #  #
\end_layout

\begin_layout LyX-Code
#  A #  #
\end_layout

\begin_layout LyX-Code
#    #  #
\end_layout

\begin_layout LyX-Code
#########
\end_layout

\begin_layout LyX-Code
Schritt: 0
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
#########
\end_layout

\begin_layout LyX-Code
#  #    #
\end_layout

\begin_layout LyX-Code
#  # #  #
\end_layout

\begin_layout LyX-Code
# AZA#  #
\end_layout

\begin_layout LyX-Code
#  A #  #
\end_layout

\begin_layout LyX-Code
#########
\end_layout

\begin_layout LyX-Code
Schritt: 1
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
#########
\end_layout

\begin_layout LyX-Code
#  #    #
\end_layout

\begin_layout LyX-Code
# A#A#  #
\end_layout

\begin_layout LyX-Code
#AZZZ#  #
\end_layout

\begin_layout LyX-Code
# AZA#  #
\end_layout

\begin_layout LyX-Code
#########
\end_layout

\begin_layout LyX-Code
Schritt: 2
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
#########
\end_layout

\begin_layout LyX-Code
# A#A   #
\end_layout

\begin_layout LyX-Code
#AZ#Z#  #
\end_layout

\begin_layout LyX-Code
#ZZZZ#  #
\end_layout

\begin_layout LyX-Code
#AZZZ#  #
\end_layout

\begin_layout LyX-Code
######### 
\end_layout

\begin_layout LyX-Code
Schritt: 3
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
#########
\end_layout

\begin_layout LyX-Code
#ZZ#ZZZZ#
\end_layout

\begin_layout LyX-Code
#ZZ#Z#ZZ#
\end_layout

\begin_layout LyX-Code
#ZZZZ#ZZ#
\end_layout

\begin_layout LyX-Code
#ZZZZ#ZZ#
\end_layout

\begin_layout LyX-Code
#########
\end_layout

\begin_layout LyX-Code
Schritt: 10
\end_layout

\begin_layout Subsection*
Beispiele:
\end_layout

\begin_layout Paragraph*
kassiopeia0.txt
\end_layout

\begin_layout Standard
Kassiopeia kann alle Felder erreichen.
\end_layout

\begin_layout Paragraph*
kassiopeia1.txt
\end_layout

\begin_layout Standard
Kassiopeia sind einige Felder versperrt.
\end_layout

\begin_layout Paragraph*
kassiopeia2.txt
\end_layout

\begin_layout Standard
Kassiopeia kann alle Felder erreichen.
\end_layout

\begin_layout Paragraph*
kassiopeia3.txt
\end_layout

\begin_layout Standard
Kassiopeia kann alle Felder erreichen.
\end_layout

\begin_layout Paragraph*
kassiopeia4.txt
\end_layout

\begin_layout Standard
Kassiopeia kann alle Felder erreichen.
\end_layout

\begin_layout Paragraph*
kassiopeia5.txt
\end_layout

\begin_layout Standard
Kassiopeia kann alle Felder erreichen.
\end_layout

\begin_layout Paragraph*
kassiopeia6.txt
\end_layout

\begin_layout Standard
Kassiopeia kann alle Felder erreichen.
\end_layout

\begin_layout Paragraph*
kassiopeia7.txt
\end_layout

\begin_layout Standard
Kassiopeia kann alle Felder erreichen.
\end_layout

\begin_layout Subsection*
Quelltext (jA2.py):
\end_layout

\begin_layout LyX-Code
step = 0
\end_layout

\begin_layout LyX-Code
first = True
\end_layout

\begin_layout LyX-Code
while new_fields or first: 
\end_layout

\begin_layout LyX-Code
    first = False
\end_layout

\begin_layout LyX-Code
    print_visualizing_fields(visualizing_fields, step)
\end_layout

\begin_layout LyX-Code
    new_fields = set() 
\end_layout

\begin_layout LyX-Code
    for cell in checked_fields: 
\end_layout

\begin_layout LyX-Code
        new_fields |= find_neighbours(cell, fields) 
\end_layout

\begin_layout LyX-Code
    fully_checked_fields |= checked_fields 
\end_layout

\begin_layout LyX-Code
    checked_fields = new_fields-fully_checked_fields 
\end_layout

\begin_layout LyX-Code
    for field in fully_checked_fields:
\end_layout

\begin_layout LyX-Code
        visualizing_fields[field[0]][field[1]] = "Z"
\end_layout

\begin_layout LyX-Code
    for field in checked_fields:
\end_layout

\begin_layout LyX-Code
        visualizing_fields[field[0]][field[1]] = "A"
\end_layout

\begin_layout LyX-Code
    step += 1
\end_layout

\begin_layout Section*
Aufgabe 1
\end_layout

\begin_layout Subsection*
Lösungsidee:
\end_layout

\begin_layout Standard
Wir haben für die Lösung dieser Aufgabe einen rekursiven Lösungsansatz verwendet.
 Bei diesem ruft sich eine Funktion immer wieder selbst auf und verändert
 dabei nur die Parameter leicht.
 (https://de.wikipedia.org/wiki/Rekursion)
\end_layout

\begin_layout Standard
Um einen Weg für Kassiopeia zu finden, bei dem sie jedes weiße Feld einmal
 betritt und die Felder 
\begin_inset Formula $F$
\end_inset

 bereits betreten hat
\end_layout

\begin_layout Itemize
wird überprüft, ob 
\begin_inset Formula $F$
\end_inset

 bereits alle weißen Felder beinhaltet, dann ist die Lösung gefunden und
 wird zurückgegeben.
\end_layout

\begin_layout Itemize
wird versucht für jedes Nachbarfeld des zuletzt betretenen Feldes, das nicht
 in 
\begin_inset Formula $F$
\end_inset

 vorkommt (sonst würde Kassiopeia ein Feld doppelt betreten können) einen
 solchen Weg zu finden
\end_layout

\begin_layout Itemize
Wenn ein Weg gefunden wurde, dann ist die Lösung gefunden und wird zurückgegeben
\end_layout

\begin_layout Itemize
Wenn keine Weg gefunden wurde, dann wir dies als Ergebnis zurückgegeben
\end_layout

\begin_layout Subsection*
Beispiele:
\end_layout

\begin_layout Paragraph*
kassiopeia1.txt
\end_layout

\begin_layout Standard
WNNWSSSOOONNNOOSSSONNN
\end_layout

\begin_layout Paragraph*
kassiopeia1.txt
\end_layout

\begin_layout Standard
Es gibt keinen Weg für Kassopeia jedes weiße Feld genau einmal zu betreten.
\end_layout

\begin_layout Paragraph*
kassiopeia2.txt
\end_layout

\begin_layout Standard
Es gibt keinen Weg für Kassopeia jedes weiße Feld genau einmal zu betreten.
\end_layout

\begin_layout Paragraph*
kassiopeia3.txt
\end_layout

\begin_layout Standard
WWSSOOOONOSONNWWW
\end_layout

\begin_layout Paragraph*
kassiopeia4.txt
\end_layout

\begin_layout Standard
Es gibt keinen Weg für Kassopeia jedes weiße Feld genau einmal zu betreten.
\end_layout

\begin_layout Paragraph*
kassiopeia5.txt
\end_layout

\begin_layout Standard
WWWWWWWWWWWW
\end_layout

\begin_layout Paragraph*
kassiopeia6.txt
\end_layout

\begin_layout Standard
Es gibt keinen Weg für Kassopeia jedes weiße Feld genau einmal zu betreten.
\end_layout

\begin_layout Paragraph*
kassiopeia7.txt
\end_layout

\begin_layout Standard
Es gibt keinen Weg für Kassopeia jedes weiße Feld genau einmal zu betreten.
\end_layout

\begin_layout Subsection*
Quelltext:
\end_layout

\begin_layout LyX-Code
def find_path(previous_path):
\end_layout

\begin_layout LyX-Code
    if all([field == ((i, j) in previous_path)
\end_layout

\begin_layout LyX-Code
            for i, row in enumerate(fields)
\end_layout

\begin_layout LyX-Code
            for j, field in enumerate(row)]): 
\end_layout

\begin_layout LyX-Code
        return previous_path 
\end_layout

\begin_layout LyX-Code
    for field in find_neighbours(previous_path[-1], fields):
\end_layout

\begin_layout LyX-Code
        if field in previous_path: 
\end_layout

\begin_layout LyX-Code
            continue 
\end_layout

\begin_layout LyX-Code
        path = find_path(previous_path+[field])
\end_layout

\begin_layout LyX-Code
        if path:
\end_layout

\begin_layout LyX-Code
            return path
\end_layout

\begin_layout LyX-Code
    return False 
\end_layout

\begin_layout Section*
Aufgabe 3
\end_layout

\begin_layout Subsection*
Lösungsidee:
\end_layout

\begin_layout Standard
Um die Anzahl der Weg, in denen man die Flaschen auf die Behälter verteilen
 kann zu ermitteln, haben auch hier einen rekursiven Lösungsansatz benutzt.
\end_layout

\begin_layout Standard
Um die Anzahl an Möglichkeiten 
\begin_inset Formula $N$
\end_inset

 Flaschen auf 
\begin_inset Formula $k$
\end_inset

 Behälter zu ermitteln
\end_layout

\begin_layout Itemize
wird überprüft, ob 
\begin_inset Formula $N$
\end_inset

 negativ ist 
\begin_inset Formula $\rightarrow$
\end_inset

 0 Möglichkeiten
\end_layout

\begin_layout Itemize
wird überprüft, ob 
\begin_inset Formula $N=0$
\end_inset

 gilt, dann wurden bereits alle Flaschen verteilt 
\begin_inset Formula $\rightarrow$
\end_inset

 1 Möglichkeit
\end_layout

\begin_layout Itemize
wird überprüft, ob 
\begin_inset Formula $N>0\land k=0$
\end_inset

, gilt, dann gibt es zwar noch Flaschen, aber keine Behälter mehr auf die
 sie verteilt werden können 
\begin_inset Formula $\rightarrow$
\end_inset

0 Möglichkeiten
\end_layout

\begin_layout Itemize
wird überprüft ob 
\begin_inset Formula $N$
\end_inset

 Flaschen überhaupt in die Behälter passen, wenn nicht 
\begin_inset Formula $\rightarrow$
\end_inset

0 Möglichkeiten
\end_layout

\begin_layout Itemize
wenn keiner dieser Fälle eintritt, dann nimmt sich das Programm den ersten
 Behälter und findet für jede mögliche Füllmenge 
\begin_inset Formula $M$
\end_inset

 dieses Behälters die Möglichkeiten 
\begin_inset Formula $N-M$
\end_inset

 Flaschen auf die restlichen Behälter zu verteilen.
 Danach addiert es die Anzahl der Möglichkeiten und gibt sie als Ergebnis
 zurück
\end_layout

\begin_layout Subsection*
Beispiele:
\end_layout

\begin_layout Paragraph
flaschenzug0.txt 
\end_layout

\begin_layout Standard
2 Moeglichkeiten
\end_layout

\begin_layout Paragraph*
flaschenzug1.txt
\end_layout

\begin_layout Standard
13 Moeglichkeiten
\end_layout

\begin_layout Paragraph*
flaschenzug2.txt
\end_layout

\begin_layout Standard
48 Moeglichkeiten
\end_layout

\begin_layout Paragraph*
flaschenzug3.txt
\end_layout

\begin_layout Standard
6209623185136 Moeglichkeiten
\end_layout

\begin_layout Paragraph*
flaschenzug4.txt
\end_layout

\begin_layout Standard
743587168174797979278525 Moeglichkeiten
\end_layout

\begin_layout Paragraph*
flaschenzug5.txt
\end_layout

\begin_layout Standard
4237618332168130643734395335220863408628 Moeglichkeiten
\end_layout

\begin_layout Subsection*
Quelltext:
\end_layout

\begin_layout Section*
Aufgabe 4
\end_layout

\begin_layout Subsection*
Teilaufgabe 1.1:
\end_layout

\begin_layout Standard
Es gibt insgesamt für jedes Loch zwei Möglichkeiten: gestanzt oder nicht.
 Da es 23 Löcher gibt, die nicht schon vorgegeben wurden, gibt es für diese
 Einschränkung 
\begin_inset Formula $2^{23}=8.388.608$
\end_inset

 verschieden Schlüsselkarten.
\end_layout

\begin_layout Subsection*
Teilaufgabe 1.2:
\end_layout

\begin_layout Standard
Hier werden die rechten zwei Spalten durch die linken bestimmt, deshalb
 gibt es noch 15 Löcher, die variiert werden können.
 Also gibt es für diese Methode 
\begin_inset Formula $2^{15}=32.768$
\end_inset

 verschiedene Schlüsselkarten.
\end_layout

\begin_layout Subsection*
Teilaufgabe 2:
\end_layout

\begin_layout Subsection*
Lösungsidee:
\end_layout

\begin_layout Standard
Da es die Aufgabe ist, möglichst unterschiedliche Schlüsselkarten zu erzeugen,
 haben wir zunächst versucht festzulegen, was 
\begin_inset Quotes gld
\end_inset

unterschiedlich
\begin_inset Quotes grd
\end_inset

 hier bedeutet und uns darauf geeinigt, dass unterschiedlich bedeutet, dass
 wenn man zwei Schlüsselkarten (in der gleichen Ausrichtung, es wurde nicht
 auf das Problem aus Teilaufgabe 1 eingegangen) vergleicht sich möglichst
 viele der einzelnen Stanz-Positionen darin unterscheiden, ob sie gestanzt
 wurden oder nicht.
 Wenn also bei der ersten Schlüsselkarte an jeder vorgesehenen Position
 ein Loch gestanzt wurde und bei der zweiten auch außer in der ersten Reihe,
 dann unterscheiden sich 5 Positionen und die beiden Schlüsselkarten haben
 einen sogenannten 
\begin_inset Quotes gld
\end_inset

Abstand
\begin_inset Quotes grd
\end_inset

 (Maßeinheit, die auch im Programm verwendet wird) von 5.
 
\end_layout

\begin_layout Standard
Da wir die Schlüsselkarten einzeln hintereinander erzeugen wollten, mussten
 wir nun ein Maß für den Abstand zwischen den schon vorhandenen Schlüssel
 und dem neuen.
 Dafür haben wird den 
\begin_inset Quotes gld
\end_inset

Mindestabstand
\begin_inset Quotes grd
\end_inset

 eingeführt.
 Er gibt den kleinsten Abstand zwischen der neuen Schlüsselkarte und einer
 der schon vorhandenen Schlüsselkarte an.
\end_layout

\begin_layout Standard
Nun soll also eine Schlüsselkarte gefunden werden, die zu den schon vorhandenen
 einen möglichst großen Mindestabstand haben soll.
 Dafür muss es zunächst Schlüsselkarten geben, die als Ausgangspunkt genutzt
 werden.
 Dafür bieten sich die beiden Extreme 
\begin_inset Quotes gld
\end_inset

alle Positionen gestanzt
\begin_inset Quotes grd
\end_inset

 und 
\begin_inset Quotes gld
\end_inset

keine Position gestanzt
\begin_inset Quotes grd
\end_inset

 an, weil sie den größtmöglichen Abstand von 25 zueinander haben.
 Danach kann es natürlich keine weiteren Schlüsselkarten mit dem Mindestabstand
 von 25 geben, sondern nur noch maximal welche mit dem Mindestabstand von
 12 (wenn man genau 12 oder 13 Positionen ausstanzt).
\end_layout

\begin_layout Standard
Nachdem die Vorbereitungen getan sind, haben wir uns folgendes Verfahren
 ausgedacht: Wenn eine neue Schlüsselkarte erzeugt werden soll, wird als
 Ausgangspunkt eine Schüsselkarte verwendet, die bei jeder Position mit
 dem Großteil der schon vorhandenen Schlüsselkarten übereinstimmt (wenn
 der Großteil an dieser Position ein Loch hat, hat sie es auch und umgekehrt).
 Dann werden die einzelnen Positionen mehrmals in zufälliger Reihenfolge
 durchlaufen und für jede Position die ähnlichste Schlüsselkarte (also die
 mit dem geringsten Abstand) gefunden und an dieser Position der Zustand
 der neuen Schlüsselkarte als das Gegenteil des Zustandes der ähnlichsten
 Schlüsselkarte gesetzt.
 Damit wird der Mindestabstand der neuen Schlüsselkarte erhöht, da sich
 die neue Schlüsselkarte im Vergleich zur ähnlichsten an dieser Position
 unterscheidet.
 Es kann passieren, dass die beiden Schlüsselkarte sich an dieser Position
 bereits unterschieden haben, dann ändert sich zwar der Mindestabstand nicht,
 aber es ändert sich die ähnlichste Schlüsselkarte auch nicht bis eine Änderung
 der neuen stattgefunden hat.
\end_layout

\begin_layout Standard
Bei diesem System wird der Mindestabstand einer Schlüsselkarte also immer
 weiter erhöht, aber es stellt sich die Frage ob der größtmögliche Mindestabstan
d für diese Schlüsselkarte bereits erreicht wurde.
 Dafür versucht das Programm die Schlüsselkarte so lange zu verbessern bis
 sie einen Mindestabstand hat, der genau so groß ist wie bei dem Schlüssel
 davor (anfangs natürlich 12 und nicht 25).
 Es bricht jedoch nach 100 Versuchen (hat sich in Tests als sinnvolle Größe
 herausgestellt) dies ab und findet einen Schlüssel, der einen um 1 verringerten
 Mindestabstand hat.
\end_layout

\begin_layout Standard
Es hat sich herausgestellt, dass wenn eine neue Schlüsselkarte einen Mindestabst
and von 
\begin_inset Formula $z$
\end_inset

 zu allen anderen hat, auch seine inverse Gegen-Schlüsselkarte einen solchen
 Mindestabstand von 
\begin_inset Formula $z$
\end_inset

 hat.
 Wir haben also unseren Vorgang damit verbessert, dass jede zweite Schlüsselkart
e als inverse der vorherigen generiert wird und da dies sehr schnell geht
 konnte damit die Geschwindigkeit fast halbiert werden.
\end_layout

\begin_layout Standard
Da die Schlüsselkarten auch ausgegeben werden sollen, haben wir uns hierfür
 eine einfach Textdarstellung ausgedacht: Ausgestanzte Positionen werden
 als 
\begin_inset Quotes gld
\end_inset

x
\begin_inset Quotes grd
\end_inset

 dargestellt, nicht ausgestanzte als 
\begin_inset Quotes gld
\end_inset

.
\begin_inset Quotes grd
\end_inset


\end_layout

\begin_layout Subsection*
Beispiele:
\end_layout

\begin_layout Itemize
\begin_inset Formula $N=7$
\end_inset

:
\begin_inset Newline newline
\end_inset

Der Mindestabstand der letzten erzeugten Schlüsselkarte liegt bei 12
\end_layout

\begin_deeper
\begin_layout LyX-Code
Schluesselkarte 1:
\end_layout

\begin_layout LyX-Code
xxxxx
\end_layout

\begin_layout LyX-Code
xxxxx
\end_layout

\begin_layout LyX-Code
xxxxx
\end_layout

\begin_layout LyX-Code
xxxxx
\end_layout

\begin_layout LyX-Code
xxxxx
\end_layout

\begin_layout LyX-Code
Mindestabstand: 25
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Schluesselkarte 2:
\end_layout

\begin_layout LyX-Code
.....
\end_layout

\begin_layout LyX-Code
.....
\end_layout

\begin_layout LyX-Code
.....
\end_layout

\begin_layout LyX-Code
.....
\end_layout

\begin_layout LyX-Code
.....
\end_layout

\begin_layout LyX-Code
Mindestabstand: 25
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Schluesselkarte 3:
\end_layout

\begin_layout LyX-Code
x.x.x
\end_layout

\begin_layout LyX-Code
x..xx
\end_layout

\begin_layout LyX-Code
x..x.
\end_layout

\begin_layout LyX-Code
.x..x
\end_layout

\begin_layout LyX-Code
xx.x.
\end_layout

\begin_layout LyX-Code
Mindestabstand: 12
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Schluesselkarte 4:
\end_layout

\begin_layout LyX-Code
.x.x.
\end_layout

\begin_layout LyX-Code
.xx..
\end_layout

\begin_layout LyX-Code
.xx.x
\end_layout

\begin_layout LyX-Code
x.xx.
\end_layout

\begin_layout LyX-Code
..x.x
\end_layout

\begin_layout LyX-Code
Mindestabstand: 12
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Schluesselkarte 5:
\end_layout

\begin_layout LyX-Code
..x.x
\end_layout

\begin_layout LyX-Code
xx...
\end_layout

\begin_layout LyX-Code
xxxxx
\end_layout

\begin_layout LyX-Code
..xxx
\end_layout

\begin_layout LyX-Code
x....
\end_layout

\begin_layout LyX-Code
Mindestabstand: 12
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Schluesselkarte 6:
\end_layout

\begin_layout LyX-Code
xx.x.
\end_layout

\begin_layout LyX-Code
..xxx
\end_layout

\begin_layout LyX-Code
.....
\end_layout

\begin_layout LyX-Code
xx...
\end_layout

\begin_layout LyX-Code
.xxxx
\end_layout

\begin_layout LyX-Code
Mindestabstand: 12
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Schluesselkarte 7:
\end_layout

\begin_layout LyX-Code
.....
\end_layout

\begin_layout LyX-Code
xxxxx
\end_layout

\begin_layout LyX-Code
....x
\end_layout

\begin_layout LyX-Code
xxxx.
\end_layout

\begin_layout LyX-Code
x..x.
\end_layout

\begin_layout LyX-Code
Mindestabstand: 12
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Formula $N=20$
\end_inset

:
\begin_inset Newline newline
\end_inset

Der Mindestabstand der letzten erzeugten Schlüsselkarte liegt bei 11
\begin_inset Newline newline
\end_inset

Die erzeugten Schlüssel sind nicht die gleichen wie bei 
\begin_inset Formula $N=7$
\end_inset

, weil bei der Erzeugung auch der Zufall eine Rolle spielt.
\end_layout

\begin_deeper
\begin_layout LyX-Code
Schluesselkarte 1:
\end_layout

\begin_layout LyX-Code
xxxxx
\end_layout

\begin_layout LyX-Code
xxxxx
\end_layout

\begin_layout LyX-Code
xxxxx
\end_layout

\begin_layout LyX-Code
xxxxx
\end_layout

\begin_layout LyX-Code
xxxxx
\end_layout

\begin_layout LyX-Code
Mindestabstand: 25
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Schluesselkarte 2:
\end_layout

\begin_layout LyX-Code
.....
\end_layout

\begin_layout LyX-Code
.....
\end_layout

\begin_layout LyX-Code
.....
\end_layout

\begin_layout LyX-Code
.....
\end_layout

\begin_layout LyX-Code
.....
\end_layout

\begin_layout LyX-Code
Mindestabstand: 25
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Schluesselkarte 3:
\end_layout

\begin_layout LyX-Code
x..xx
\end_layout

\begin_layout LyX-Code
x.x.x
\end_layout

\begin_layout LyX-Code
x.x..
\end_layout

\begin_layout LyX-Code
..x..
\end_layout

\begin_layout LyX-Code
x.xxx
\end_layout

\begin_layout LyX-Code
Mindestabstand: 12
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Schluesselkarte 4:
\end_layout

\begin_layout LyX-Code
.xx..
\end_layout

\begin_layout LyX-Code
.x.x.
\end_layout

\begin_layout LyX-Code
.x.xx
\end_layout

\begin_layout LyX-Code
xx.xx
\end_layout

\begin_layout LyX-Code
.x...
\end_layout

\begin_layout LyX-Code
Mindestabstand: 12
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Schluesselkarte 5:
\end_layout

\begin_layout LyX-Code
xx...
\end_layout

\begin_layout LyX-Code
xx.xx
\end_layout

\begin_layout LyX-Code
xx.x.
\end_layout

\begin_layout LyX-Code
....x
\end_layout

\begin_layout LyX-Code
..xxx
\end_layout

\begin_layout LyX-Code
Mindestabstand: 12
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Schluesselkarte 6:
\end_layout

\begin_layout LyX-Code
..xxx
\end_layout

\begin_layout LyX-Code
..x..
\end_layout

\begin_layout LyX-Code
..x.x
\end_layout

\begin_layout LyX-Code
xxxx.
\end_layout

\begin_layout LyX-Code
xx...
\end_layout

\begin_layout LyX-Code
Mindestabstand: 12
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Schluesselkarte 7:
\end_layout

\begin_layout LyX-Code
x.x.x
\end_layout

\begin_layout LyX-Code
.....
\end_layout

\begin_layout LyX-Code
xxxxx
\end_layout

\begin_layout LyX-Code
x...x
\end_layout

\begin_layout LyX-Code
x..xx
\end_layout

\begin_layout LyX-Code
Mindestabstand: 12
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Schluesselkarte 8:
\end_layout

\begin_layout LyX-Code
.x.x.
\end_layout

\begin_layout LyX-Code
xxxxx
\end_layout

\begin_layout LyX-Code
.....
\end_layout

\begin_layout LyX-Code
.xxx.
\end_layout

\begin_layout LyX-Code
.xx..
\end_layout

\begin_layout LyX-Code
Mindestabstand: 12
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Schluesselkarte 9:
\end_layout

\begin_layout LyX-Code
xxxx.
\end_layout

\begin_layout LyX-Code
....x
\end_layout

\begin_layout LyX-Code
.x..x
\end_layout

\begin_layout LyX-Code
xxx..
\end_layout

\begin_layout LyX-Code
..xxx
\end_layout

\begin_layout LyX-Code
Mindestabstand: 12
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Schluesselkarte 10:
\end_layout

\begin_layout LyX-Code
....x
\end_layout

\begin_layout LyX-Code
xxxx.
\end_layout

\begin_layout LyX-Code
x.xx.
\end_layout

\begin_layout LyX-Code
...xx
\end_layout

\begin_layout LyX-Code
xx...
\end_layout

\begin_layout LyX-Code
Mindestabstand: 12
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Schluesselkarte 11:
\end_layout

\begin_layout LyX-Code
xx..x
\end_layout

\begin_layout LyX-Code
.x.xx
\end_layout

\begin_layout LyX-Code
x...x
\end_layout

\begin_layout LyX-Code
x.x..
\end_layout

\begin_layout LyX-Code
xx..x
\end_layout

\begin_layout LyX-Code
Mindestabstand: 12
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Schluesselkarte 12:
\end_layout

\begin_layout LyX-Code
..xx.
\end_layout

\begin_layout LyX-Code
x.x..
\end_layout

\begin_layout LyX-Code
.xxx.
\end_layout

\begin_layout LyX-Code
.x.xx
\end_layout

\begin_layout LyX-Code
..xx.
\end_layout

\begin_layout LyX-Code
Mindestabstand: 12
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Schluesselkarte 13:
\end_layout

\begin_layout LyX-Code
..xx.
\end_layout

\begin_layout LyX-Code
.x.x.
\end_layout

\begin_layout LyX-Code
x.xx.
\end_layout

\begin_layout LyX-Code
.xx..
\end_layout

\begin_layout LyX-Code
.x.xx
\end_layout

\begin_layout LyX-Code
Mindestabstand: 12
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Schluesselkarte 14:
\end_layout

\begin_layout LyX-Code
xx..x
\end_layout

\begin_layout LyX-Code
x.x.x
\end_layout

\begin_layout LyX-Code
.x..x
\end_layout

\begin_layout LyX-Code
x..xx
\end_layout

\begin_layout LyX-Code
x.x..
\end_layout

\begin_layout LyX-Code
Mindestabstand: 12
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Schluesselkarte 15:
\end_layout

\begin_layout LyX-Code
.x.xx 
\end_layout

\begin_layout LyX-Code
...xx
\end_layout

\begin_layout LyX-Code
xxx..
\end_layout

\begin_layout LyX-Code
.x..x
\end_layout

\begin_layout LyX-Code
xxx.x
\end_layout

\begin_layout LyX-Code
Mindestabstand: 11
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Schluesselkarte 16:
\end_layout

\begin_layout LyX-Code
x.x..
\end_layout

\begin_layout LyX-Code
xxx..
\end_layout

\begin_layout LyX-Code
...xx
\end_layout

\begin_layout LyX-Code
x.xx.
\end_layout

\begin_layout LyX-Code
...x.
\end_layout

\begin_layout LyX-Code
Mindestabstand: 11
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Schluesselkarte 17:
\end_layout

\begin_layout LyX-Code
x....
\end_layout

\begin_layout LyX-Code
..xxx
\end_layout

\begin_layout LyX-Code
x.xxx
\end_layout

\begin_layout LyX-Code
xx...
\end_layout

\begin_layout LyX-Code
..x..
\end_layout

\begin_layout LyX-Code
Mindestabstand: 11
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Schluesselkarte 18:
\end_layout

\begin_layout LyX-Code
.xxxx
\end_layout

\begin_layout LyX-Code
xx...
\end_layout

\begin_layout LyX-Code
.x...
\end_layout

\begin_layout LyX-Code
..xxx
\end_layout

\begin_layout LyX-Code
xx.xx
\end_layout

\begin_layout LyX-Code
Mindestabstand: 11
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Schluesselkarte 19:
\end_layout

\begin_layout LyX-Code
.xxxx
\end_layout

\begin_layout LyX-Code
x..x.
\end_layout

\begin_layout LyX-Code
..xxx
\end_layout

\begin_layout LyX-Code
x....
\end_layout

\begin_layout LyX-Code
..x.x
\end_layout

\begin_layout LyX-Code
Mindestabstand: 11
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Schluesselkarte 20:
\end_layout

\begin_layout LyX-Code
x....
\end_layout

\begin_layout LyX-Code
.xx.x
\end_layout

\begin_layout LyX-Code
xx...
\end_layout

\begin_layout LyX-Code
.xxxx
\end_layout

\begin_layout LyX-Code
xx.x.
\end_layout

\begin_layout LyX-Code
Mindestabstand: 11
\end_layout

\end_deeper
\begin_layout Itemize
\begin_inset Formula $N=1000$
\end_inset

:
\begin_inset Newline newline
\end_inset

Der Mindestabstand der letzten erzeugten Schlüsselkarte liegt bei 6.
\end_layout

\begin_layout Subsection*
Quelltext (A4.py):
\end_layout

\begin_layout LyX-Code
def next_key(keys, max_tries=100): 
\end_layout

\begin_layout LyX-Code
    if len(keys) == 2:
\end_layout

\begin_layout LyX-Code
        target_difference = 12
\end_layout

\begin_layout LyX-Code
    else:
\end_layout

\begin_layout LyX-Code
        target_difference = min_key_difference(keys[-1], keys[:-1])
\end_layout

\begin_layout LyX-Code
    
\end_layout

\begin_layout LyX-Code
    r = [sum(key[i] for key in keys) > len(keys)/2.
 for i in range(25)]
\end_layout

\begin_layout LyX-Code
    tries = 0
\end_layout

\begin_layout LyX-Code
    while tries < max_tries and min_key_difference(r, keys) < target_difference
 
\backslash

\end_layout

\begin_layout LyX-Code
            or min_key_difference(r, keys) < max(target_difference-1, 1):
\end_layout

\begin_layout LyX-Code
        for i in shuffled(range(25)):
\end_layout

\begin_layout LyX-Code
            sim_key = min([(key_difference(key, r), key) for key in keys])[1]
 
\end_layout

\begin_layout LyX-Code
            r[i] = not sim_key[i] 
\end_layout

\begin_layout LyX-Code
        tries += 1
\end_layout

\begin_layout LyX-Code
    return r
\end_layout

\end_body
\end_document
